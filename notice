find_element_by_id — поиск по уникальному атрибуту id элемента.
Если ваши разработчики проставляют всем элементам в приложении уникальный id, то вам повезло,
и вы чаще всего будет использовать этот метод, так как он наиболее стабильный;

find_element_by_css_selector — поиск элемента с помощью правил на основе CSS.
Это универсальный метод поиска, так как большинство веб-приложений использует CSS для вёрстки и
задания оформления страницам. Если find_element_by_id вам не подходит из-за отсутствия id у элементов,
то скорее всего вы будете использовать именно этот метод в ваших тестах;

find_element_by_xpath — поиск с помощью языка запросов XPath, позволяет выполнять очень гибкий поиск элементов;
find_element_by_name — поиск по атрибуту name элемента;
find_element_by_tag_name — поиск элемента по названию тега элемента;
find_element_by_class_name — поиск по значению атрибута class;
find_element_by_link_text — поиск ссылки на странице по полному совпадению;
find_element_by_partial_link_text — поиск ссылки на странице,
если текст селектора совпадает с любой частью текста ссылки.


способ для поиска элементов с помощью универсального метода find_element() и
полей класса By из библиотеки selenium. Пример:
------------------------------------------------------------
from selenium import webdriver
from selenium.webdriver.common.by import By

browser = webdriver.Chrome()
browser.get("http://suninjuly.github.io/simple_form_find_task.html")
button = browser.find_element(By.ID, "submit_button")
button.click()
# закрываем браузер после всех манипуляций
browser.quit()
---------------------------------------------------------------
Можно использовать те же стратегии поиска, что и в первом способе. Второй способ более удобен для оформления архитектуры тестовых сценариев с помощью подхода Page Object Model, о котором мы будем говорить далее. Пока же предлагаем пользоваться первым методом с явным указанием способа поиска, так как он кажется нам более удобным, но ничто не мешает вам пользоваться и тем, и другим. Поля класса By, которые можно использовать для поиска:

By.ID – поиск по уникальному атрибуту id элемента;
By.CSS_SELECTOR – поиск элементов с помощью правил на основе CSS;
By.XPATH – поиск элементов с помощью языка запросов XPath;
By.NAME – поиск по атрибуту name элемента;
By.TAG_NAME – поиск по названию тега;
By.CLASS_NAME – поиск по атрибуту class элемента;
By.LINK_TEXT – поиск ссылки с указанным текстом. Текст ссылки должен быть точным совпадением;
By.PARTIAL_LINK_TEXT – поиск ссылки по частичному совпадению текста.

--------------
В тесте нам нужно проверить, что отображаются все выбранные для покупки товары.
Для этого существуют методы find_elements_by, которые в отличие от find_element_by
вернут список всех найденных элементов по заданному условию. Проверив длину списка,
мы можем удостовериться, что в корзине отобразилось правильное количество товаров

# открываем страницу первого товара
# данный сайт не существует, этот код приведен только для примера
browser.get("https://fake-shop.com/book1.html")

# добавляем товар в корзину
add_button = browser.find_element_by_css_selector(".add")
add_button.click()

# открываем страницу второго товара
browser.get("https://fake-shop.com/book2.html")

# добавляем товар в корзину
add_button = browser.find_element_by_css_selector(".add")
add_button.click()

# тестовый сценарий
# открываем корзину
browser.get("https://fake-shop.com/basket.html")

# ищем все добавленные товары
goods = browser.find_elements_by_css_selector(".good")

# проверяем, что количество товаров равно 2
assert len(goods) == 2